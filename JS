// Smooth scrolling for navigation links
document.querySelectorAll('nav a').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);
        window.scrollTo({
            top: targetElement.offsetTop - 80,
            behavior: 'smooth'
        });
    });
});

// Form submission handling
const contactForm = document.querySelector('.contact-form');
contactForm.addEventListener('submit', function(e) {
    e.preventDefault();
    alert('Thank you for your message! I will get back to you soon.');
    contactForm.reset();
});

// Add more floating flowers with JavaScript
function createFlowers() {
    const flowersContainer = document.querySelector('.floating-flowers');
    const flowers = ['‚ùÄ', '‚úø', 'üå∏', 'üå∫', 'üåº', 'üå∑'];
    
    for (let i = 0; i < 10; i++) {
        const flower = document.createElement('div');
        flower.className = 'flower';
        flower.innerHTML = flowers[Math.floor(Math.random() * flowers.length)];
        flower.style.left = Math.random() * 100 + '%';
        flower.style.top = Math.random() * 100 + 'vh';
        flower.style.fontSize = (Math.random() * 1.5 + 1.5) + 'rem';
        flower.style.animationDuration = (Math.random() * 20 + 15) + 's';
        flower.style.animationDelay = (Math.random() * -20) + 's';
        flower.style.opacity = Math.random() * 0.2 + 0.1;
        flowersContainer.appendChild(flower);
    }
}

// Create additional flowers when page loads
window.addEventListener('load', createFlowers);

// Animate elements when they come into view
const animateOnScroll = () => {
    const elements = document.querySelectorAll('.project-card, .skill');
    
    elements.forEach(element => {
        const position = element.getBoundingClientRect();
        
        // If element is in viewport
        if(position.top < window.innerHeight - 100) {
            element.style.animation = 'fadeIn 1s ease-out forwards';
        }
    });
};

// Listen for scroll events
window.addEventListener('scroll', animateOnScroll);
// Initial check in case elements are already in view
window.addEventListener('load', animateOnScroll);

// Add animation to form elements when they come into view
const animateFormOnScroll = () => {
    const formElements = document.querySelectorAll('.form-group');
    
    formElements.forEach((element, index) => {
        const position = element.getBoundingClientRect();
        
        // If element is in viewport
        if(position.top < window.innerHeight - 100) {
            element.style.animation = `fadeIn 0.5s ease-out ${index * 0.2}s forwards`;
            element.style.opacity = 0;
        }
    });
};

window.addEventListener('scroll', animateFormOnScroll);
window.addEventListener('load', animateFormOnScroll);

// Add subtle animation to hero text
function animateHeroText() {
    const heroText = document.querySelector('.hero h1');
    const heroParagraph = document.querySelector('.hero p');
    const heroButton = document.querySelector('.hero .btn');
    
    // Reset animations after a delay to create a looping effect
    setInterval(() => {
        heroText.style.animation = 'none';
        heroParagraph.style.animation = 'none';
        heroButton.style.animation = 'none';
        
        setTimeout(() => {
            heroText.style.animation = 'fadeInUp 1s ease-out';
            heroParagraph.style.animation = 'fadeInUp 1.2s ease-out';
            heroButton.style.animation = 'fadeInUp 1.4s ease-out';
        }, 50);
    }, 8000);
}

window.addEventListener('load', animateHeroText);
